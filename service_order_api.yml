openapi: '3.0.2'
info:
  title: Service Orders Management
  description: This api provides resources to manage service orders register and flow, allowing to keep device history
  version: '1.0.0'
  contact: 
    name: Isaque Alves
    email: isaquealves@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: '{proto}://{host}/{version}'
    variables:
      proto:
        enum:
          - http
          - https
        default: http
      host:
        enum:
          - localhost:8000
          - somvp.herokuapp.com
        default: localhost:8000
        description: The host used for development
      version:
        enum:
          - v1
        default: v1
        description: MVP (minimum viable product) version        
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    SuccessfulResponse:
      description: Ok
    InternalErrorResponse:
      description: Server temporarily having failure
    UnauthorizedErrorResponse:
      description: Invalid or missing access token found
    NotFoundErrorResponse:
      description: Could not find the specified item
    BadRequestErrorResponse:
      description: Invalid parameters found on request sent
    AccessTokenResponse:
      description: Response for Access Token requests
  schemas:
    UserCode:
      required:
        - code
      properties:
        code:
          description: The code sent through email used to generate the tokens
          type: string
          pattern: '/^\d{6}$/g'
    User:
      required:
        - username
      properties:
        username:
          description: The user username. Minimum of 5 chars and max of 12 chars length
          type: string
          pattern: '/^[a-zA-Z\-\_\.]{5,12}$/g'
        private_key:
          description: Autogenerated secret RSA key used for token creation
          type: string
        public_key:
          description: Autogenerated public key used for token validation
          type: string
    NewUser:
      required:
        - username
      properties:
        username:
          description: The user username. Minimum of 5 chars and max of 12 chars length
          type: string
          pattern: '/^[a-zA-Z\-\_\.]{5,12}$/g'
    Client:
      allOf:
        - $ref: '#/components/schemas/NewClient'
        - type: object
          required:
          - id
          properties:
            id:
              type: string
              format: uuid
    NewClient:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      required:
        - email
        - name
        - doc
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
          pattern: /^/\(\d{2}/\).\d{4,5}.\d{4}$/
        doc:
          type: string
          pattern: /^\d{3}\.\d{3}\.\d{3}\-\d{2}$/
        company_name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        notes:
          type: string
        active:
          type: boolean
    Professional:
      allOf:
        - $ref: '#/components/schemas/NewProfessional'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewProfessional:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        expertise:
          $ref: '#/components/schemas/Expertise'
        active:
          type: boolean
    Expertise:
      allOf:
        - $ref: '#/components/schemas/NewExpertise'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewExpertise:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    Company:
      allOf:
        - $ref: '#/components/schemas/NewCompany'
        - type: object
          required:
          - id
          properties:
            id:
              type: string
              format: uuid
    NewCompany:
      type: object
      required:
        - commercial_name
        - legal_name 
        - doc
        - address
      properties:
        commercial_name:
          type: string
        legal_name: 
          type: string
        doc:
          type: string
          pattern: /^\d{2}\.\d{3}\.\d{3}\/\d{4}\-\d{2}$/
        address:
          $ref: '#/components/schemas/Address'
    Vendor:
      allOf:
        - $ref: '#/components/schemas/NewVendor'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewVendor:
      type: object
      required:
        - legalName
        - doc
        - stateDoc
      properties:
        legalName:
          type: string
        ibgeCode:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        doc:
          type: string
        stateDoc:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        represent:
          type: string
        representEmail:
          type: string
        representPhone:
          type: string
    Product:
      allOf:
        - $ref: '#/components/schemas/NewProduct'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewProduct:
      type: object
      required:
        - code
        - barcode
        - vendor
        - productType
      properties:
        code:
          type: string
        barcode: 
          type: string
        vendor:
          $ref: '#/components/schemas/Vendor'
        productType:
          type: string
        description:
          type: string
        model:
          type: string
        dependencies:
          type: string
        maxQtde:
          type: integer
        minQtde: 
          type: integer
        warranty:
          type: string
        warrantyDuration:
          type: integer
        unitPrice:
          type: number
        margin:
          type: number
        sellingPrice:
          type: number
        discounts:
          type: number
        note:
          type: string
    Address:
      type: object
      required:
        - zip_code
      properties:
        street:
          type: string
        number: 
          type: integer
        complement:
          type: string
        zip_code:
          type: string
          pattern: /^\d{5}-?\d{3}$/
    DeviceType:
      allOf:
        - $ref: '#/components/schemas/NewDeviceType'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewDeviceType:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    OccurrenceType:
      allOf:
        - $ref: '#/components/schemas/NewOccurrenceType'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewOccurrenceType:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
        name:
          type: string
    Occurrence:
      allOf:
        - $ref: '#/components/schemas/NewOccurrence'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewOccurrence:
      type: object
      required:
        - client
        - deviceType
        - deviceSeries
        - occurrenceType
      properties:
        client:
          $ref: '#/components/schemas/Client'
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        deviceBrand:
          type: string
        deviceAge:
          type: string
        deviceModel:
          type: string
        deviceSeries:
          type: string
        installedSoftwares:
          type: string
        licensedSoftwares:
          type: string
        accessories:
          type: string
        occurrenceType:
          $ref: '#/components/schemas/OccurrenceType'
        isRecurrent:
          type: boolean
        description:
          type: string
        professional:
          $ref: '#/components/schemas/Professional'
        notes:
          type: string
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
        diagnosis:
          type: string
    Photo:
      allOf:
        - $ref: '#/components/schemas/NewPhoto'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewPhoto:
      type: object
      required:
        - title
        - src
        - occurrence
      properties:
        title:
          type: string
        src:
          type: string
        description:
          type: string
        occurrence:
          $ref: '#/components/schemas/Occurrence'
    Intervention:
      allOf:
        - $ref: '#/components/schemas/NewIntervention'
    NewIntervention:
      type: object
      properties:
        code:
          type: string
          format: /^[svc]-\d{1,4}-[A-Z]$/
        interventionType:
          type: string
        description:
          type: string
    Estimate:
      allOf:
        - $ref: '#/components/schemas/NewEstimate'
      required:
        - id
      properties:
        id: 
          type: string
          format: uuid
    NewEstimate:
      type: object
      properties:
        occurrences:
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
        interventions:
          type: array
          items:
            $ref: '#/components/schemas/Intervention'
    ServiceOrder:
      allOf:
        - $ref: '#/components/schemas/NewServiceOrder'
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
    NewServiceOrder:
      type: object
      properties:
        professional: 
          $ref: '#/components/schemas/Professional' 
        client:
          $ref: '#/components/schemas/Client'
        estimateRef:
          $ref: '#/components/schemas/Estimate'
        referenceDate:
          type: string
        signed:
          type: boolean
        drop:
          type: boolean
    AccessToken:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
    RefreshTokenRequestBody:
      type: object
      properties:
        refresh:
          type: string
paths:
  /:
    description: The api root. It provides a view of all resources available in current version
    get:
      operationId: app.api.root
      tags:
        - /
      responses:
        '200':
          description: OK
      security: []      
  /auth:
    description: The authentication endpoint.
    post:
      operationId: app.api.authentication.request
      tags:
        - auth
      description: Verify user 
      requestBody:
        description: Generate and send through email a personal code
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Code sent through email
          content:
            application/json:
              schema:
                $ref: '#/components/responses/SuccessfulResponse'
      security: []
  /auth/token:
    description: The authentication endpoint.
    post:
      operationId: app.api.authentication.token
      tags:
        - auth
      description: Verify personal code
      requestBody:
        description: Get the authentication token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCode'
      responses:
        '200':
          description: Access Token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
      security: []
  /auth/refresh:
    post:
      operationId: app.api.authentication.refresh
      tags:
        - auth
      description: Used to refresh expired authentication token
      requestBody:
        description: The Refresh token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestBody'
      responses:
        '200':
          description: Access token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
      security: []
  /users:
    post:
      operationId: app.api.user.create
      tags:
        - User
      description: Create a new system user
      requestBody:
        description: User to add to system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: 'Client Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
      security: []
      
  /clients:
    get:
      operationId: app.api.client.list
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
    post:
      operationId: app.api.client.create
      tags:
        - client
      description: Create a new business client
      requestBody:
        description: Client to add to business
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewClient'
      responses:
        '200':
          description: 'Client Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'

  /clients/{id}/:
    get:
      operationId: app.api.client.get
      tags:
        - client
      description: Returns a client based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of client to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The client response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
    patch:
      operationId: app.api.client.update
      tags:
        - client
      description: Update client based on given ID
      parameters:
        - name: id
          in: path
          description: ID of client to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.client.delete
      tags:
        - client
      description:  Remove client by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of client to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /professionals:
    get:
      operationId: app.api.professional.list
      tags:
        - professional
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  professionals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Professional'
    post:
      operationId: app.api.professional.create
      tags:
        - professional
      description: Create a new business professional
      requestBody:
        description: Professional to add to business
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProfessional'
      responses:
        '200':
          description: 'Professional Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /professionals/{id}:
    get:
      operationId: app.api.professional.get
      tags:
        - professional
      description: Returns a professional based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of professional to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The professional response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professional'
    patch:
      operationId: app.api.professional.update
      tags:
        - professional
      description: Update professional based on given ID
      parameters:
        - name: id
          in: path
          description: ID of professional to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.professional.delete
      tags:
        - professional
      description:  Remove professional by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of professional to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Professional Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /specialties:
    get:
      operationId: app.api.specialty.list
      tags:
        - expertise
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  specialties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expertise'
    post:
      operationId: app.api.specialty.create
      tags:
        - expertise
      description: Create a new professional expertise
      requestBody:
        description: Expertise to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExpertise'
      responses:
        '200':
          description: 'Expertise Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expertise'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /specialties/{id}:
    get:
      operationId: app.api.specialty.get
      tags:
        - expertise    
      description: Returns a expertise based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of expertise to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The expertise response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expertise'
    patch:
      operationId: app.api.specialty.update
      tags:
        - expertise    
      description: Update expertise based on given ID
      parameters:
        - name: id
          in: path
          description: ID of expertise to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.specialty.delete
      tags:
        - expertise    
      description:  Remove expertise by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of expertise to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Expertise Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /companies:
    get:
      operationId: app.api.company.list
      tags:
        - company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  companies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Company'
    post:
      operationId: app.api.company.create
      tags:
        - company
      description: Create a new company
      requestBody:
        description: Company to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCompany'
      responses:
        '200':
          description: 'Company Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /companies/{id}:
    get:
      operationId: app.api.company.get
      tags:
        - company
      description: Returns a company based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of company to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The company response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
    patch:
      operationId: app.api.company.update
      tags:
        - company
      description: Update company based on given ID
      parameters:
        - name: id
          in: path
          description: ID of company to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.company.delete
      tags:
        - company
      description:  Remove company by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of company to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Company Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /vendors:
    get:
      operationId: app.api.vendor.list
      tags:
        - vendor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  vendors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vendor'
    post:
      operationId: app.api.vendor.create
      tags:
        - vendor
      description: Create a new vendor
      requestBody:
        description: Vendor to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVendor'
      responses:
        '200':
          description: 'Vendor Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /vendors/{id}:
    get:
      operationId: app.api.vendor.get
      tags:
        - vendor
      description: Returns a vendor based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of vendor to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The vendor response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
    patch:
      operationId: app.api.vendor.update
      tags:
        - vendor
      description: Update vendor based on given ID
      parameters:
        - name: id
          in: path
          description: ID of vendor to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.vendor.delete
      tags:
        - vendor
      description:  Remove vendor by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of expertise to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Vendor Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /vendors/{id}/products:
    get:
      operationId: app.api.product.by_vendor
      tags:
        - product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
  /vendors/{id}/products/{p_id}:
    get:
      operationId: app.api.product.byVendor
      tags:
        - product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: p_id
          in: path
          required: true
          schema:
            type: string
            format: uuid            
      description: Returns a expertise based on informed ID
      responses:
        '200':
          description: 'The expertise response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expertise'
  /products:
    get:
      operationId: app.api.product.list
      tags:
        - product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
    post:
      operationId: app.api.product.create
      tags:
        - product
      description: Create a new product
      requestBody:
        description: Product to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: 'Product Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /products/{id}:
    get:
      operationId: app.api.product.get
      tags:
        - product
      description: Returns a product based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of product to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The product response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      operationId: app.api.product.update
      tags:
        - product
      description: Update product based on given ID
      parameters:
        - name: id
          in: path
          description: ID of product to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.product.delete
      tags:
        - product
      description:  Remove expertise by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of expertise to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /device_types:
    get:
      operationId: app.api.device_type.list
      tags:
        - device type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  device_types:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceType'
    post:
      operationId: app.api.device_type.create
      tags:
        - device type
      description: Create a new device type
      requestBody:
        description: Device type to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDeviceType'
      responses:
        '200':
          description: 'Device Type Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceType'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /device_types/{id}:
    get:
      operationId: app.api.device_type.get
      tags:
        - device type
      description: Returns a device type based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of device type to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The device type response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceType'
    patch:
      operationId: app.api.device_type.update
      tags:
        - device type
      description: Update device type based on given ID
      parameters:
        - name: id
          in: path
          description: ID of device type to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.device_type.delete
      tags:
        - device type
      description:  Remove device type by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of device type to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Device type Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /occurrence_types:
    get:
      operationId: app.api.occurrence_type.list
      tags:
        - occurrence type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  occurrence_types:
                    type: array
                    items:
                      $ref: '#/components/schemas/OccurrenceType'
    post:
      operationId: app.api.occurrence_type.create
      tags:
        - occurrence type
      description: Create a new occurrence type
      requestBody:
        description: occurrence type to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOccurrenceType'
      responses:
        '200':
          description: 'Occurrence Type Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccurrenceType'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /occurrence_types/{id}:
    get:
      operationId: app.api.occurrence_type.get
      tags:
        - occurrence type
      description: Returns a occurrence type based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of occurrence type to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The occurrence type response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OccurrenceType'
    patch:
      operationId: app.api.occurrence_type.update
      tags:
        - occurrence type    
      description: Update occurrence type based on given ID
      parameters:
        - name: id
          in: path
          description: ID of occurrence type to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.occurrence_type.delete
      tags:
        - occurrence type    
      description:  Remove occurrence type by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of device type to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Occurrence type Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /occurrence:
    get:
      operationId: app.api.occurrence.list
      tags:
        - occurrence
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  occurrences:
                    type: array
                    items:
                      $ref: '#/components/schemas/Occurrence'
    post:
      operationId: app.api.occurrence.create
      tags:
        - occurrence
      description: Create a new occurrence type
      requestBody:
        description: occurrence type to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOccurrence'
      responses:
        '200':
          description: 'Occurrence Type Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /occurrence/{id}:
    get:
      operationId: app.api.occurrence.get
      tags:
        - occurrence
      description: Returns a occurrence based on informed ID
      parameters:
        - name: id
          in: path
          description: ID of occurrence to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The occurrence response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
    patch:
      operationId: app.api.occurrence.update
      tags:
        - occurrence
      description: Update occurrence based on given ID
      parameters:
        - name: id
          in: path
          description: ID of occurrence to patch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.occurrence.delete
      tags:
        - occurrence
      description:  Remove occurrence by given ID attribute
      parameters:
        - name: id
          in: path
          description: ID of device to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Occurrence Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /occurrences/{professional}:
    get:
      operationId: app.api.occurrence.by_professional
      tags:
        - occurrence
      parameters:
        - name: professional
          in: path
          required: true
          schema:
            type: string
            format: uuid    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  occurrences:
                    type: array
                    items:
                      $ref: '#/components/schemas/Occurrence'
  /occurrences/{client}:
    get:
      operationId: app.api.occurrence.by_client
      tags:
        - occurrence
      parameters:
        - name: client
          in: path
          required: true
          schema:
            type: string
            format: uuid    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  occurrences:
                    type: array
                    items:
                      $ref: '#/components/schemas/Occurrence'
  /occurrences/{device_type}:
    get:
      operationId: app.api.occurrence.by_device_type
      tags:
        - occurrence
      parameters:
        - name: device_type
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  occurrences:
                    type: array
                    items:
                      $ref: '#/components/schemas/Occurrence'
  /occurrence/{occurrence_id}/photos:
    get:
      operationId: app.api.photo.list
      tags:
        - photo
      parameters:
        - name: occurrence_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Photo'
    post:
      operationId: app.api.photo.create
      tags:
        - photo
      parameters:
        - name: occurrence_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
      description: Create a new photo
      requestBody:
        description: Photo to add to occurrence
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPhoto'
      responses:
        '200':
          description: Photo Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /occurrence/{occurrence_id}/photos/{photo_id}/:
    get:
      operationId: app.api.photo.by_occurrence
      tags:
        - photo
      description: Returns a photo based on informed ID
      parameters:
        - name: occurrence_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
        - name: photo_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'The photo response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
    patch:
      operationId: app.api.photo.update
      tags:
        - photo
      description: Update photo based on given ID
      parameters:
        - name: occurrence_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
        - name: photo_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The resource was updated successfully
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
    delete:
      operationId: app.api.photo.delete
      tags:
        - photo
      description:  Remove photo by given photo ID and occurrence id attribute
      parameters:
        - name: occurrence_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
        - name: photo_id
          in: path
          description: ID of photo to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Photo Removed
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /interventions:
    get:
      operationId: app.api.intervention.list
      tags:
        - intervention
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  interventions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Intervention'
    post:
      operationId: app.api.intervention.create
      tags:
        - intervention
      description: Create a new intervention
      requestBody:
        description: Intervention to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIntervention'
      responses:
        '200':
          description: 'Intervention Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Intervention'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /interventions/{professional}:
    get:
      operationId: app.api.intervention.by_professional
      tags:
        - intervention
      parameters:
        - name: professional
          required: true
          in: path
          schema:
            type: string
            format: uuid    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  interventions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Intervention'
  /interventions/{client}:
    get:
      operationId: app.api.intervention.by_client
      tags:
        - intervention
      parameters:
        - name: client
          required: true
          in: path
          schema:
            type: string
            format: uuid    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  interventions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Intervention'
  /interventions/{device_type}:
    get:
      operationId: app.api.intervention.by_device_type
      tags:
        - intervention
      parameters:
        - name: device_type
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  interventions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Intervention'
  /orders:
    get:
      operationId: app.api.order.list
      tags:
        - service order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceOrder'
    post:
      operationId: app.api.order.create
      tags:
        - service order
      description: Create a new order
      requestBody:
        description: Order to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewServiceOrder'
      responses:
        '200':
          description: 'Order Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceOrder'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /orders/{intervention_type}:
    get:
      operationId: app.api.order.by_intervention_type
      tags:
        - service order
      parameters:
        - name: intervention_type
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceOrder'
  /orders/{professional}:
    get:
      operationId: app.api.order.by_professional
      tags:
        - service order
      parameters:
        - name: professional
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceOrder'
  /orders/{client}:
    get:
      operationId: app.api.order.by_client
      tags:
        - service order
      parameters:
        - name: client
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceOrder'
  /orders/{device_type}:
    get:
      operationId: app.api.order.by_device_type
      tags:
        - service order
      parameters:
        - name: device_type
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceOrder'
  /orders/{estimate}:
    get:
      operationId: app.api.order.by_estimate
      tags:
        - service order
      parameters:
        - name: estimate
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceOrder'
  /estimates:
    get:
      operationId: app.api.estimate.list  
      tags:
        - estimate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  estimates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Estimate'
    post: 
      operationId: app.api.estimate.create
      tags:
        - estimate
      description: Create a new estimate
      requestBody:
        description: Estimate to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEstimate'
      responses:
        '200':
          description: 'Estimate Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Estimate'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'
  /estimates/{professional}:
    get:
      operationId: app.api.estimate.by_professional
      tags:
        - estimate
      parameters:
        - name: professional
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  estimates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Estimate'
  /estimates/{client}:
    get:
      operationId: app.api.estimate.by_client
      tags:
        - estimate
      parameters:
        - name: client
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  estimates:
                    type: array
                    items:
                    $ref: '#/components/schemas/Estimate'
  /estimates/{device_type}:
    get:
      operationId: app.api.estimate.by_device_type
      tags:
        - estimate
      parameters:
        - name: device_type
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  estimates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Estimate'